{"ast":null,"code":"var _jsxFileName = \"/Users/nassimlarafa/Developer/uploadFile/chunk-upload-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\n\n// Function to calculate chunk size based on file size\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getChunkSize = fileSize => {\n  if (fileSize < 100 * 1024 * 1024) {\n    // Less than 100 MB\n    return 1 * 1024 * 1024; // 1 MB\n  } else if (fileSize < 1024 * 1024 * 1024) {\n    // Less than 1 GB\n    return 5 * 1024 * 1024; // 5 MB\n  } else {\n    // 1 GB or larger\n    return 10 * 1024 * 1024; // 10 MB\n  }\n};\nconst FileUpload = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Handle file selection\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    setFile(selectedFile);\n    setError(null); // Reset error when a new file is selected\n  };\n\n  // Upload a single chunk\n  const uploadChunk = async (chunk, chunkIndex, totalChunks, chunkSize) => {\n    const formData = new FormData();\n    formData.append(\"file\", chunk); // Append the file chunk\n    formData.append(\"chunkIndex\", chunkIndex); // Append the chunk index\n    formData.append(\"totalChunks\", totalChunks); // Append the total number of chunks\n    formData.append(\"fileName\", file.name); // Append the file name\n\n    try {\n      const response = await axios.post(\"http://localhost:8000/api/upload/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\" // Set the correct Content-Type\n        }\n      });\n      setProgress((chunkIndex + 1) / totalChunks * 100); // Update progress\n      return response.data; // Return the server response\n    } catch (error) {\n      console.error(\"Error uploading chunk:\", error);\n      throw error; // Rethrow the error to handle it in the main function\n    }\n  };\n\n  // Handle the full file upload process\n  const handleUpload = async () => {\n    if (!file) {\n      setError(\"Please select a file.\");\n      return;\n    }\n\n    // Calculate chunk size based on file size\n    const chunkSize = getChunkSize(file.size);\n    const totalChunks = Math.ceil(file.size / chunkSize); // Calculate totalChunks\n\n    try {\n      // Upload all chunks\n      for (let i = 0; i < totalChunks; i++) {\n        const chunk = file.slice(i * chunkSize, (i + 1) * chunkSize); // Split the file into chunks\n        const response = await uploadChunk(chunk, i, totalChunks, chunkSize); // Upload each chunk\n\n        // If this is the last chunk, set the uploaded file\n        if (i === totalChunks - 1 && response.success) {\n          setUploadedFile(file.name);\n        }\n      }\n    } catch (error) {\n      setError(\"An error occurred during upload. Please try again.\");\n      console.error(\"Error completing upload:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"File Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), progress > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n        value: progress,\n        max: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [Math.round(progress), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this), uploadedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Uploaded File: \", uploadedFile]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), uploadedFile.endsWith(\".jpg\") || uploadedFile.endsWith(\".png\") ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:8000/media/${uploadedFile}`,\n        alt: \"Uploaded\",\n        style: {\n          maxWidth: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `http://localhost:8000/media/${uploadedFile}`,\n        download: true,\n        children: \"Download File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"SERzRx076aMkpUb++msndlQnSAg=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","getChunkSize","fileSize","FileUpload","_s","file","setFile","progress","setProgress","uploadedFile","setUploadedFile","error","setError","handleFileChange","e","selectedFile","target","files","uploadChunk","chunk","chunkIndex","totalChunks","chunkSize","formData","FormData","append","name","response","post","headers","data","console","handleUpload","size","Math","ceil","i","slice","success","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","value","max","round","style","color","endsWith","src","alt","maxWidth","href","download","_c","$RefreshReg$"],"sources":["/Users/nassimlarafa/Developer/uploadFile/chunk-upload-frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\n// Function to calculate chunk size based on file size\nconst getChunkSize = (fileSize) => {\n  if (fileSize < 100 * 1024 * 1024) { // Less than 100 MB\n    return 1 * 1024 * 1024; // 1 MB\n  } else if (fileSize < 1024 * 1024 * 1024) { // Less than 1 GB\n    return 5 * 1024 * 1024; // 5 MB\n  } else { // 1 GB or larger\n    return 10 * 1024 * 1024; // 10 MB\n  }\n};\n\nconst FileUpload = () => {\n  const [file, setFile] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Handle file selection\n  const handleFileChange = (e) => {\n    const selectedFile = e.target.files[0];\n    setFile(selectedFile);\n    setError(null); // Reset error when a new file is selected\n  };\n\n  // Upload a single chunk\n  const uploadChunk = async (chunk, chunkIndex, totalChunks, chunkSize) => {\n    const formData = new FormData();\n    formData.append(\"file\", chunk); // Append the file chunk\n    formData.append(\"chunkIndex\", chunkIndex); // Append the chunk index\n    formData.append(\"totalChunks\", totalChunks); // Append the total number of chunks\n    formData.append(\"fileName\", file.name); // Append the file name\n\n    try {\n      const response = await axios.post(\"http://localhost:8000/api/upload/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\", // Set the correct Content-Type\n        },\n      });\n      setProgress(((chunkIndex + 1) / totalChunks) * 100); // Update progress\n      return response.data; // Return the server response\n    } catch (error) {\n      console.error(\"Error uploading chunk:\", error);\n      throw error; // Rethrow the error to handle it in the main function\n    }\n  };\n\n  // Handle the full file upload process\n  const handleUpload = async () => {\n    if (!file) {\n      setError(\"Please select a file.\");\n      return;\n    }\n\n    // Calculate chunk size based on file size\n    const chunkSize = getChunkSize(file.size);\n    const totalChunks = Math.ceil(file.size / chunkSize); // Calculate totalChunks\n\n    try {\n      // Upload all chunks\n      for (let i = 0; i < totalChunks; i++) {\n        const chunk = file.slice(i * chunkSize, (i + 1) * chunkSize); // Split the file into chunks\n        const response = await uploadChunk(chunk, i, totalChunks, chunkSize); // Upload each chunk\n\n        // If this is the last chunk, set the uploaded file\n        if (i === totalChunks - 1 && response.success) {\n          setUploadedFile(file.name);\n        }\n      }\n    } catch (error) {\n      setError(\"An error occurred during upload. Please try again.\");\n      console.error(\"Error completing upload:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>File Upload</h1>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={handleUpload}>Upload</button>\n\n      {/* Progress Bar */}\n      {progress > 0 && (\n        <div>\n          <progress value={progress} max=\"100\" />\n          <span>{Math.round(progress)}%</span>\n        </div>\n      )}\n\n      {/* Error Message */}\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n\n      {/* Uploaded File Preview */}\n      {uploadedFile && (\n        <div>\n          <p>Uploaded File: {uploadedFile}</p>\n          {uploadedFile.endsWith(\".jpg\") || uploadedFile.endsWith(\".png\") ? (\n            <img\n              src={`http://localhost:8000/media/${uploadedFile}`}\n              alt=\"Uploaded\"\n              style={{ maxWidth: \"100%\" }}\n            />\n          ) : (\n            <a href={`http://localhost:8000/media/${uploadedFile}`} download>\n              Download File\n            </a>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}