{"ast":null,"code":"var _jsxFileName = \"/Users/nassimlarafa/Developer/uploadFile/chunk-upload-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CHUNK_SIZE = 1024 * 1024; // 1 MB\n\nconst FileUpload = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Handle file selection\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n    setError(null); // Reset error when a new file is selected\n  };\n\n  // Upload a single chunk\n  const uploadChunk = async (chunk, chunkIndex, totalChunks) => {\n    const formData = new FormData();\n    formData.append(\"file\", chunk); // Append the file chunk\n    formData.append(\"chunkIndex\", chunkIndex); // Append the chunk index\n    formData.append(\"totalChunks\", totalChunks); // Append the total number of chunks\n    formData.append(\"fileName\", file.name); // Append the file name\n\n    try {\n      const response = await axios.post(\"http://localhost:8000/api/upload/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\" // Set the correct Content-Type\n        }\n      });\n      setProgress((chunkIndex + 1) / totalChunks * 100); // Update progress\n      return response.data; // Return the server response\n    } catch (error) {\n      console.error(\"Error uploading chunk:\", error);\n      throw error; // Rethrow the error to handle it in the main function\n    }\n  };\n\n  // Handle the full file upload process\n  const handleUpload = async () => {\n    if (!file) {\n      setError(\"Please select a file.\");\n      return;\n    }\n    const totalChunks = Math.ceil(file.size / CHUNK_SIZE); // Calculate totalChunks\n\n    try {\n      // Upload all chunks\n      for (let i = 0; i < totalChunks; i++) {\n        const chunk = file.slice(i * CHUNK_SIZE, (i + 1) * CHUNK_SIZE); // Split the file into chunks\n        await uploadChunk(chunk, i, totalChunks); // Upload each chunk\n      }\n\n      // Notify the backend that the upload is complete\n      const response = await axios.post(\"http://localhost:8000/api/upload/complete/\", {\n        fileName: file.name,\n        totalChunks: totalChunks\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\" // Use JSON for this request\n        }\n      });\n\n      // Check if the response indicates success\n      if (response.data.success) {\n        setUploadedFile(file.name); // Set the uploaded file name\n      } else {\n        setError(\"File upload failed. Please try again.\");\n      }\n    } catch (error) {\n      setError(\"An error occurred during upload. Please try again.\");\n      console.error(\"Error completing upload:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"File Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), progress > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n        value: progress,\n        max: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [Math.round(progress), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this), uploadedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Uploaded File: \", uploadedFile]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), uploadedFile.endsWith(\".jpg\") || uploadedFile.endsWith(\".png\") ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:8000/media/${uploadedFile}`,\n        alt: \"Uploaded\",\n        style: {\n          maxWidth: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `http://localhost:8000/media/${uploadedFile}`,\n        download: true,\n        children: \"Download File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"SERzRx076aMkpUb++msndlQnSAg=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","CHUNK_SIZE","FileUpload","_s","file","setFile","progress","setProgress","uploadedFile","setUploadedFile","error","setError","handleFileChange","e","target","files","uploadChunk","chunk","chunkIndex","totalChunks","formData","FormData","append","name","response","post","headers","data","console","handleUpload","Math","ceil","size","i","slice","fileName","success","children","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","value","max","round","style","color","endsWith","src","alt","maxWidth","href","download","_c","$RefreshReg$"],"sources":["/Users/nassimlarafa/Developer/uploadFile/chunk-upload-frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst CHUNK_SIZE = 1024 * 1024; // 1 MB\n\nconst FileUpload = () => {\n  const [file, setFile] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Handle file selection\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n    setError(null); // Reset error when a new file is selected\n  };\n\n  // Upload a single chunk\n  const uploadChunk = async (chunk, chunkIndex, totalChunks) => {\n    const formData = new FormData();\n    formData.append(\"file\", chunk); // Append the file chunk\n    formData.append(\"chunkIndex\", chunkIndex); // Append the chunk index\n    formData.append(\"totalChunks\", totalChunks); // Append the total number of chunks\n    formData.append(\"fileName\", file.name); // Append the file name\n\n    try {\n      const response = await axios.post(\"http://localhost:8000/api/upload/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\", // Set the correct Content-Type\n        },\n      });\n      setProgress(((chunkIndex + 1) / totalChunks) * 100); // Update progress\n      return response.data; // Return the server response\n    } catch (error) {\n      console.error(\"Error uploading chunk:\", error);\n      throw error; // Rethrow the error to handle it in the main function\n    }\n  };\n\n  // Handle the full file upload process\n  const handleUpload = async () => {\n    if (!file) {\n      setError(\"Please select a file.\");\n      return;\n    }\n\n    const totalChunks = Math.ceil(file.size / CHUNK_SIZE); // Calculate totalChunks\n\n    try {\n      // Upload all chunks\n      for (let i = 0; i < totalChunks; i++) {\n        const chunk = file.slice(i * CHUNK_SIZE, (i + 1) * CHUNK_SIZE); // Split the file into chunks\n        await uploadChunk(chunk, i, totalChunks); // Upload each chunk\n      }\n\n      // Notify the backend that the upload is complete\n      const response = await axios.post(\n        \"http://localhost:8000/api/upload/complete/\",\n        {\n          fileName: file.name,\n          totalChunks: totalChunks,\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\", // Use JSON for this request\n          },\n        }\n      );\n\n      // Check if the response indicates success\n      if (response.data.success) {\n        setUploadedFile(file.name); // Set the uploaded file name\n      } else {\n        setError(\"File upload failed. Please try again.\");\n      }\n    } catch (error) {\n      setError(\"An error occurred during upload. Please try again.\");\n      console.error(\"Error completing upload:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>File Upload</h1>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={handleUpload}>Upload</button>\n\n      {/* Progress Bar */}\n      {progress > 0 && (\n        <div>\n          <progress value={progress} max=\"100\" />\n          <span>{Math.round(progress)}%</span>\n        </div>\n      )}\n\n      {/* Error Message */}\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n\n      {/* Uploaded File Preview */}\n      {uploadedFile && (\n        <div>\n          <p>Uploaded File: {uploadedFile}</p>\n          {uploadedFile.endsWith(\".jpg\") || uploadedFile.endsWith(\".png\") ? (\n            <img\n              src={`http://localhost:8000/media/${uploadedFile}`}\n              alt=\"Uploaded\"\n              style={{ maxWidth: \"100%\" }}\n            />\n          ) : (\n            <a href={`http://localhost:8000/media/${uploadedFile}`} download>\n              Download File\n            </a>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}