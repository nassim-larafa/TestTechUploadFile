{"ast":null,"code":"var _jsxFileName = \"/Users/nassimlarafa/Developer/TestTechnique/Frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CHUNK_SIZE = 10 * 1024 * 1024; // 10 MB (pour notre 3 GB fichier)\n\n/* cette fonction on peut l'utiliser si on veut optimiser le chnuk-size selon le taille du notre fichier\nconst getChunkSize = (fileSize) => {\n  if (fileSize < 100 * 1024 * 1024) { // Less than 100 MB\n    return 1 * 1024 * 1024; // 1 MB\n  } else if (fileSize < 1024 * 1024 * 1024) { // Less than 1 GB\n    return 5 * 1024 * 1024; // 5 MB\n  } else { // 1 GB or larger\n    return 10 * 1024 * 1024; // 10 MB\n  }\n};*/\n\nconst FileUpload = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Handle file selection\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n    setError(null); // Reset error when a new file is selected\n  };\n  const saveUploadedChunks = (fileName, uploadedChunks) => {\n    localStorage.setItem(fileName, JSON.stringify(uploadedChunks));\n  };\n  const getUploadedChunks = fileName => {\n    const uploadedChunks = localStorage.getItem(fileName);\n    return uploadedChunks ? JSON.parse(uploadedChunks) : [];\n  };\n  // Upload a single chunk\n  const uploadChunk = async (chunk, chunkIndex, totalChunks) => {\n    const formData = new FormData();\n    formData.append(\"file\", chunk); // Append the file chunk\n    formData.append(\"chunkIndex\", chunkIndex); // Append the chunk index\n    formData.append(\"totalChunks\", totalChunks); // Append the total number of chunks\n    formData.append(\"fileName\", file.name); // Append the file name\n\n    try {\n      const response = await axios.post(\"http://localhost:8000/api/upload/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\" // Set the correct Content-Type\n        }\n      });\n      setProgress((chunkIndex + 1) / totalChunks * 100); // Update progress\n      return response.data; // Return the server response\n    } catch (error) {\n      console.error(\"Error uploading chunk:\", error);\n      throw error; // Rethrow the error to handle it in the main function\n    }\n  };\n  const handleUpload = async () => {\n    if (!file) {\n      setError(\"Please select a file.\");\n      return;\n    }\n    const totalChunks = Math.ceil(file.size / CHUNK_SIZE);\n    const uploadedChunks = getUploadedChunks(file.name);\n    try {\n      for (let i = 0; i < totalChunks; i++) {\n        if (uploadedChunks.includes(i)) {\n          // Skip already uploaded chunks\n          setProgress((i + 1) / totalChunks * 100);\n          continue;\n        }\n        const chunk = file.slice(i * CHUNK_SIZE, (i + 1) * CHUNK_SIZE);\n        const response = await uploadChunk(chunk, i, totalChunks);\n\n        // Mark this chunk as uploaded\n        uploadedChunks.push(i);\n        saveUploadedChunks(file.name, uploadedChunks);\n\n        // If this is the last chunk, set the uploaded file\n        if (i === totalChunks - 1 && response.success) {\n          setUploadedFile(file.name);\n        }\n      }\n    } catch (error) {\n      setError(\"An error occurred during upload. Please try again.\");\n      console.error(\"Error completing upload:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"File Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), progress > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n        value: progress,\n        max: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [Math.round(progress), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }, this), uploadedFile && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Uploaded File: \", uploadedFile]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), uploadedFile.endsWith(\".jpg\") || uploadedFile.endsWith(\".png\") ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://localhost:8000/media/${uploadedFile}`,\n        alt: \"Uploaded\",\n        style: {\n          maxWidth: \"100%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `http://localhost:8000/media/${uploadedFile}`,\n        download: true,\n        children: \"Download File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"SERzRx076aMkpUb++msndlQnSAg=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","CHUNK_SIZE","FileUpload","_s","file","setFile","progress","setProgress","uploadedFile","setUploadedFile","error","setError","handleFileChange","e","target","files","saveUploadedChunks","fileName","uploadedChunks","localStorage","setItem","JSON","stringify","getUploadedChunks","getItem","parse","uploadChunk","chunk","chunkIndex","totalChunks","formData","FormData","append","name","response","post","headers","data","console","handleUpload","Math","ceil","size","i","includes","slice","push","success","children","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","value","max","round","style","color","endsWith","src","alt","maxWidth","href","download","_c","$RefreshReg$"],"sources":["/Users/nassimlarafa/Developer/TestTechnique/Frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst CHUNK_SIZE = 10 * 1024 * 1024; // 10 MB (pour notre 3 GB fichier)\n\n/* cette fonction on peut l'utiliser si on veut optimiser le chnuk-size selon le taille du notre fichier\nconst getChunkSize = (fileSize) => {\n  if (fileSize < 100 * 1024 * 1024) { // Less than 100 MB\n    return 1 * 1024 * 1024; // 1 MB\n  } else if (fileSize < 1024 * 1024 * 1024) { // Less than 1 GB\n    return 5 * 1024 * 1024; // 5 MB\n  } else { // 1 GB or larger\n    return 10 * 1024 * 1024; // 10 MB\n  }\n};*/\n\nconst FileUpload = () => {\n  const [file, setFile] = useState(null);\n  const [progress, setProgress] = useState(0);\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Handle file selection\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n    setError(null); // Reset error when a new file is selected\n  };\n\n\n  const saveUploadedChunks = (fileName, uploadedChunks) => {\n    localStorage.setItem(fileName, JSON.stringify(uploadedChunks));\n  };\n  \n  const getUploadedChunks = (fileName) => {\n    const uploadedChunks = localStorage.getItem(fileName);\n    return uploadedChunks ? JSON.parse(uploadedChunks) : [];\n  };\n  // Upload a single chunk\n  const uploadChunk = async (chunk, chunkIndex, totalChunks) => {\n    const formData = new FormData();\n    formData.append(\"file\", chunk); // Append the file chunk\n    formData.append(\"chunkIndex\", chunkIndex); // Append the chunk index\n    formData.append(\"totalChunks\", totalChunks); // Append the total number of chunks\n    formData.append(\"fileName\", file.name); // Append the file name\n\n    try {\n      const response = await axios.post(\"http://localhost:8000/api/upload/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\", // Set the correct Content-Type\n        },\n      });\n      setProgress(((chunkIndex + 1) / totalChunks) * 100); // Update progress\n      return response.data; // Return the server response\n    } catch (error) {\n      console.error(\"Error uploading chunk:\", error);\n      throw error; // Rethrow the error to handle it in the main function\n    }\n  };\n\n\n  const handleUpload = async () => {\n    if (!file) {\n      setError(\"Please select a file.\");\n      return;\n    }\n  \n    const totalChunks = Math.ceil(file.size / CHUNK_SIZE);\n    const uploadedChunks = getUploadedChunks(file.name);\n  \n    try {\n      for (let i = 0; i < totalChunks; i++) {\n        if (uploadedChunks.includes(i)) {\n          // Skip already uploaded chunks\n          setProgress(((i + 1) / totalChunks) * 100);\n          continue;\n        }\n  \n        const chunk = file.slice(i * CHUNK_SIZE, (i + 1) * CHUNK_SIZE);\n        const response = await uploadChunk(chunk, i, totalChunks);\n  \n        // Mark this chunk as uploaded\n        uploadedChunks.push(i);\n        saveUploadedChunks(file.name, uploadedChunks);\n  \n        // If this is the last chunk, set the uploaded file\n        if (i === totalChunks - 1 && response.success) {\n          setUploadedFile(file.name);\n        }\n      }\n    } catch (error) {\n      setError(\"An error occurred during upload. Please try again.\");\n      console.error(\"Error completing upload:\", error);\n    }\n  };\n \n\n  return (\n    <div>\n      <h1>File Upload</h1>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={handleUpload}>Upload</button>\n\n      {/* Progress Bar */}\n      {progress > 0 && (\n        <div>\n          <progress value={progress} max=\"100\" />\n          <span>{Math.round(progress)}%</span>\n        </div>\n      )}\n\n      {/* Error Message */}\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n\n      {/* Uploaded File Preview */}\n      {uploadedFile && (\n        <div>\n          <p>Uploaded File: {uploadedFile}</p>\n          {uploadedFile.endsWith(\".jpg\") || uploadedFile.endsWith(\".png\") ? (\n            <img\n              src={`http://localhost:8000/media/${uploadedFile}`}\n              alt=\"Uploaded\"\n              style={{ maxWidth: \"100%\" }}\n            />\n          ) : (\n            <a href={`http://localhost:8000/media/${uploadedFile}`} download>\n              Download File\n            </a>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FileUpload;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}